#if 1
#include "cv.h"  
#include "highgui.h"   
#include <ml.h>  
#include <iostream>  
#include <fstream>  
#include <string>  
#include <vector>  
#include "opencv2/contrib/contrib.hpp"
using namespace cv;
using namespace std;

#define _train
//#define _test
int ImgWidht = 64;
int ImgHeight = 64;
Directory dir;
void GetFilePath(string filepath, vector<Mat> &image, vector<int> &lables, int x){
	string extenl = "*";//"*"  
	bool addPath = false;//true;  
	Mat src;

	vector<string> path = dir.GetListFiles(filepath, extenl, addPath);
	for (int i = 0; i<path.size(); i++){
		string fullpath = filepath;
		fullpath += "//";
		fullpath += path[i].c_str();
		src = imread(fullpath.c_str(), CV_LOAD_IMAGE_ANYCOLOR);
		//resize(src,src,use_size);
		if (!src.empty()){
			//resize(src,src,Size(ImgWidht,ImgHeight));
			image.push_back(src);
			lables.push_back(x);
		}
	}
}
int main(int argc, char** argv)
{

#ifdef _train
	vector<string> img_path;
	vector<int> img_catg;
	vector<Mat> samples;
	vector<int> lables;
	string posname = "C:\\Users\\DELL\\Desktop\\truckSmp\\poss";
	GetFilePath(posname, samples, lables, 1);
	string negname = "C:\\Users\\DELL\\Desktop\\truckSmp\\negs";
	GetFilePath(negname, samples, lables, 0);




	Mat data_mat, res_mat;
	string::size_type nImgNum = samples.size();            //读入样本数量  
	////样本矩阵，nImgNum：横坐标是样本数量， WIDTH * HEIGHT：样本特征向量，即图像大小  
	//data_mat = Mat::zeros( nImgNum, 12996, CV_32FC1 );    
	//类型矩阵,存储每个样本的类型标志  
	res_mat = Mat::zeros(nImgNum, 1, CV_32FC1);

	Mat src;
	Mat trainImg = Mat::zeros(ImgHeight, ImgWidht, CV_8UC3);//需要分析的图片  
	//HOGDescriptor *hog = new HOGDescriptor(cvSize(ImgWidht, ImgHeight), cvSize(16, 16), cvSize(4, 4), cvSize(8, 8), 9);  //具体意思见参考文章1,2     
	HOGDescriptor *hog = new HOGDescriptor(cvSize(ImgWidht, ImgHeight), cvSize(32, 32), cvSize(8, 8), cvSize(8, 8), 9);  //具体意思见参考文章1,2   
	//HOGDescriptor *hog = new HOGDescriptor(cvSize(ImgWidht, ImgHeight), cvSize(300, 150), cvSize(60, 30), cvSize(60,30), 9);  //具体意思见参考文章1,2   
	vector<float>descriptors;//结果数组     

	for (string::size_type i = 0; i != samples.size(); i++)
	{
		//src = imread(img_path[i].c_str(), 1);   
		src = samples[i];
		//cout<<" processing "<<img_path[i].c_str()<<endl;  

		resize(src, trainImg, cv::Size(ImgWidht, ImgHeight));

		hog->compute(trainImg, descriptors, Size(1, 1), Size(0, 0)); //调用计算函数开始计算
		if (i == 0)
		{
			data_mat = Mat::zeros(nImgNum, descriptors.size(), CV_32FC1); //根据输入图片大小进行分配空间 
		}
		cout << "HOG dims: " << descriptors.size() << endl;
		int n = 0;
		for (vector<float>::iterator iter = descriptors.begin(); iter != descriptors.end(); iter++)
		{
			data_mat.at<float>(i, n) = *iter;
			n++;
		}
		//cout<<SVMtrainMat->rows<<endl;  
		res_mat.at<float>(i, 0) = lables[i];
		//cout<<" end processing "<<img_path[i].c_str()<<" "<<img_catg[i]<<endl;  
		cout << " end processing " << i << endl;
	}

	CvSVM svm;// = cv::CvSVM();
	CvSVMParams param;
	CvTermCriteria criteria;
	criteria = cvTermCriteria(CV_TERMCRIT_EPS, 1000, FLT_EPSILON);
	//param = CvSVMParams( CvSVM::C_SVC, CvSVM::RBF, 10.0, 0.09, 1.0, 10.0, 0.5, 1.0, NULL, criteria );
	param = CvSVMParams(CvSVM::C_SVC, CvSVM::LINEAR, 10.0, 0.09, 1.0, 10.0, 0.5, 1.0, NULL, criteria);

	/*
	SVM种类：CvSVM::C_SVC
	Kernel的种类：CvSVM::RBF
	degree：10.0（此次不使用）
	gamma：8.0
	coef0：1.0（此次不使用）
	C：10.0
	nu：0.5（此次不使用）
	p：0.1（此次不使用）
	然后对训练数据正规化处理，并放在CvMat型的数组里。
	*/
	//☆☆☆☆☆☆☆☆☆(5)SVM学习☆☆☆☆☆☆☆☆☆☆☆☆         
	svm.train(data_mat, res_mat, Mat(), Mat(), param);
	//☆☆利用训练数据和确定的学习参数,进行SVM学习☆☆☆☆     
	svm.save("C:\\Users\\DELL\\Desktop\\truckSmp\\car_svmHog_64_last.xml");  
#endif // _train


#ifdef _test

	CvSVM svm;
	svm.load("C:\\Users\\DELL\\Desktop\\门窗samples\\svmHog.xml");
	VideoCapture cap("C:\\Users\\DELL\\Desktop\\门窗samples\\剪切视频\\门窗.avi");
	if(!cap.isOpened()){
		return 0;
	}
	HOGDescriptor *hog = new HOGDescriptor(cvSize(ImgWidht, ImgHeight), cvSize(300, 150), cvSize(60, 30), cvSize(60,30), 9);  //具体意思见参考文章1,2   
	vector<float>descriptors;//结果数组  
	Mat frame, testMat;
	int i=0,flag=-1;
	string homepath = "C:\\Users\\DELL\\Desktop\\门窗samples\\";
	while(true){
		cap>>frame;
		resize(frame,frame,Size(ImgWidht, ImgHeight));
		hog->compute(frame, descriptors, Size(1, 1), Size(0, 0)); //调用计算函数开始计算
		if(i==0){
			testMat = Mat::zeros(1, descriptors.size(), CV_32FC1);
		}
		for(int c=0;c<testMat.cols;++c){
			testMat.at<float>(0,c) = descriptors[c];
		}
		++i;
		int ret = svm.predict(testMat);
		if(ret!=flag){
			char ch[10];
			itoa(i,ch,10);
			string name = homepath + ch + ".jpg";
			imwrite(name,frame);
		}
		flag = ret;
		imshow("frame",frame);
		waitKey(10);
		if(ret==1){
			cout<<"door open"<<endl;
		}else{
			cout<<"door closed"<<endl;
		}
	}
#endif // _test
	return 0;
}
#endif